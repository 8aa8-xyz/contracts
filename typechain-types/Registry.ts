/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface RegistryInterface extends utils.Interface {
  contractName: "Registry";
  functions: {
    "dispute(bytes32)": FunctionFragment;
    "resolve(bytes32)": FunctionFragment;
    "verify(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "dispute", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "resolve", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "verify", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "dispute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "Dispute(address,bytes32)": EventFragment;
    "DisputeSuccessful(address,bytes32)": EventFragment;
    "VerificationSuccessful(address,bytes32,bytes32)": EventFragment;
    "Verify(address,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerificationSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Verify"): EventFragment;
}

export type DisputeEvent = TypedEvent<
  [string, string],
  { owner: string; arg1: string }
>;

export type DisputeEventFilter = TypedEventFilter<DisputeEvent>;

export type DisputeSuccessfulEvent = TypedEvent<
  [string, string],
  { owner: string; arg1: string }
>;

export type DisputeSuccessfulEventFilter =
  TypedEventFilter<DisputeSuccessfulEvent>;

export type VerificationSuccessfulEvent = TypedEvent<
  [string, string, string],
  { owner: string; proof: string; arg2: string }
>;

export type VerificationSuccessfulEventFilter =
  TypedEventFilter<VerificationSuccessfulEvent>;

export type VerifyEvent = TypedEvent<
  [string, string, string],
  { owner: string; arg1: string; arg2: string }
>;

export type VerifyEventFilter = TypedEventFilter<VerifyEvent>;

export interface Registry extends BaseContract {
  contractName: "Registry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dispute(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolve(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    verify(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  dispute(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolve(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  verify(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    dispute(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    resolve(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    verify(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Dispute(address,bytes32)"(
      owner?: string | null,
      arg1?: BytesLike | null
    ): DisputeEventFilter;
    Dispute(owner?: string | null, arg1?: BytesLike | null): DisputeEventFilter;

    "DisputeSuccessful(address,bytes32)"(
      owner?: string | null,
      arg1?: BytesLike | null
    ): DisputeSuccessfulEventFilter;
    DisputeSuccessful(
      owner?: string | null,
      arg1?: BytesLike | null
    ): DisputeSuccessfulEventFilter;

    "VerificationSuccessful(address,bytes32,bytes32)"(
      owner?: string | null,
      proof?: BytesLike | null,
      arg2?: null
    ): VerificationSuccessfulEventFilter;
    VerificationSuccessful(
      owner?: string | null,
      proof?: BytesLike | null,
      arg2?: null
    ): VerificationSuccessfulEventFilter;

    "Verify(address,bytes32,bytes32)"(
      owner?: string | null,
      arg1?: BytesLike | null,
      arg2?: null
    ): VerifyEventFilter;
    Verify(
      owner?: string | null,
      arg1?: BytesLike | null,
      arg2?: null
    ): VerifyEventFilter;
  };

  estimateGas: {
    dispute(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolve(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dispute(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
